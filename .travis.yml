language: cpp

dist: trusty

notifications:
  email: false

matrix:
  include:
  # Linux - gcc 7 + coverage
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && GCOV=gcov-7"
        - COVERAGE=ON
        - COL_RESET="\e[0m"
        - COL_YELLOW="\e[93m"

  # Linux - gcc 7
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
  # Linux - gcc 8
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
  # Linux - clang 5
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-5.0
            - g++-7
      env:
        - MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"
  # Linux - clang 6
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-6.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-6.0
            - g++-7
      env:
        - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
        

before_install:
  - eval "${MATRIX_EVAL}"
  - |
    if [[ -v COVERAGE ]]; then
      wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.13.orig.tar.gz
      tar xf lcov_1.13.orig.tar.gz
      sudo make -C lcov-1.13/ install
    fi

script:
  - |
    if [[ -v COVERAGE ]]; then
      cmake . -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Coverage && make
      echo -e "$COL_YELLOW INITIALIZING LCOV ENVIRONMENT $COL_RESET  \n"
      lcov --version
      lcov --directory . --zerocounters --quiet
      lcov --capture --initial --directory . --output-file coverage_base.info --gcov-tool '/usr/bin/gcov-7' --no-external --quiet
      lcov --remove coverage_base.info '/usr/*' 'third-party/catch.hpp' 'test/test_ram.cpp' 'test/test_cp1.cpp' --output-file coverage_base.info --quiet
      echo -e "$COL_YELLOW RUNNING TESTS $COL_RESET \n"
      ctest -C Debug --output-on-failure
    else
      cmake . -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug && make && ctest -C Debug --output-on-failure
      cmake . -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release && make && ctest -C Release --output-on-failure
    fi

after_success:
  - |
    if [[ -v COVERAGE ]]; then
      echo -e "$COL_YELLOW RUNNING LCOV AFTER TESTS $COL_RESET \n"
      lcov --directory . --capture --output-file coverage_test.info --gcov-tool '/usr/bin/gcov-7' --no-external
      lcov --remove coverage_base.info '/usr/*' 'third-party/catch.hpp' 'test/test_ram.cpp' 'test/test_cp1.cpp' --output-file coverage_test.info
      lcov --add-tracefile coverage_base.info --add-tracefile coverage_test.info -o coverage_total.info
      rm coverage_base.info coverage_test.info
      lcov --list coverage_total.info
      echo -e "$COL_YELLOW UPLOADING TO CODECOV $COL_RESET \n"
      bash <(curl -s https://codecov.io/bash) -X coveragepy -x "/usr/bin/gcov-7"
    fi